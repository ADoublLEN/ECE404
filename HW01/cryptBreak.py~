#!/usr/bin/env python

### Author: Alex Dunker
### ECN: adunker
### HW:
### Filename:	
### Due Date:

import sys
import itertools
import string
from BitVector import *

if len(sys.argv) is not 2:
    sys.exit('''Needs one command line argument for the encrypted input''')

BLOCKSIZE = 16

def decrypt(encrypted_bv, key):
    PassPhrase = "Hopes and dreams of a million years"
    BLOCKSIZE = 16
    numbytes = BLOCKSIZE // 8
    # Reduce the passphrase to a bit array of size BLOCKSIZE:
    bv_iv = BitVector(bitlist = [0]*BLOCKSIZE)
    for i in range(0,len(PassPhrase) // numbytes):
        textstr = PassPhrase[i*numbytes:(i+1)*numbytes]
        bv_iv ^= BitVector( textstring = textstr )
    # Reduce the key to a bit array of size BLOCKSIZE:
    key_bv = BitVector(bitlist = [0]*BLOCKSIZE)
    for i in range(0,len(key) // numbytes):
        keyblock = key[i*numbytes:(i+1)*numbytes]
        key_bv ^= BitVector( textstring = keyblock )

    # Create a bitvector for storing the decrypted plaintext bit array:
    msg_decrypted_bv = BitVector( size = 0 )

    # Carry out differential XORing of bit blocks and decryption:
    previous_decrypted_block = bv_iv
    for i in range(0, len(encrypted_bv) // BLOCKSIZE):
        bv = encrypted_bv[i*BLOCKSIZE:(i+1)*BLOCKSIZE]
        temp = bv.deep_copy()
        bv ^=  previous_decrypted_block
        previous_decrypted_block = temp
        bv ^=  key_bv
        msg_decrypted_bv += bv

    # Extract plaintext from the decrypted bitvector:    
    outputtext = msg_decrypted_bv.get_text_from_bitvector()
    return outputtext
    
def main():
    print "start"
    # Create a bitvector from the ciphertext hex string:
    FILEIN = open(sys.argv[1])
    encrypted_bv = BitVector( hexstring = FILEIN.read() ) 
    gen = itertools.combinations(string.printable, 16)
    for key in gen:
        print decrypt(encrypted_bv, key)
        
main()
